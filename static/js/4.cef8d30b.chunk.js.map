{"version":3,"sources":["components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Message","props","className","classes","message","id","left","right","AddMessageForm","onSubmit","render","handleSubmit","name","validate","composeValidators","required","maxLengthCreator","input","meta","placeholder","button","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","ava","messagesElements","messages","m","dialogsItems","addMessage","e","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","to","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,OAAS,iC,oGCSZC,EANC,SAACC,GACb,OAAO,qBAAKC,UAAWC,IAAQC,QAAxB,SACDH,EAAMI,GAAK,EAAK,qBAAKH,UAAWC,IAAQG,KAAxB,SAA+BL,EAAMG,UAAkB,qBAAKF,UAAWC,IAAQI,MAAxB,SAAgCN,EAAMG,a,0CCwBxGI,EAvBQ,SAACP,GAAD,OACnB,cAAC,IAAD,CACIQ,SAAUR,EAAMQ,SAChBC,OAAQ,gBAAEC,EAAF,EAAEA,aAAF,OACJ,uBAAMF,SAAUE,EAAhB,UACI,8BACI,cAAC,IAAD,CACIC,KAAK,iBACLC,SAAUC,YAAkBC,IAAUC,YAAiB,MAF3D,SAGK,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OACG,cAAC,IAAD,CAAUD,MAAOA,EAAOC,KAAMA,EAAMC,YAAY,4BAI5D,8BACI,wBAAQjB,UAAWC,IAAQiB,OAA3B,2BCYLC,EA3BC,SAACpB,GAEb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAC3BC,KAAI,SAAAC,GAAC,OAAI,cAACC,EAAA,EAAD,CAAYhB,KAAMe,EAAEf,KAAiBP,GAAIsB,EAAEtB,GAAIwB,IAAKF,EAAEE,KAAvBF,EAAEtB,OACvCyB,EAAmBR,EAAMS,SAC5BL,KAAI,SAAAM,GAAC,OAAI,cAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,QAAoBC,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAK9C,OACI,sBAAKH,UAAWC,IAAQsB,QAAxB,UACI,qBAAKvB,UAAWC,IAAQ8B,aAAxB,SACKT,IAEL,sBAAKtB,UAAWC,IAAQ4B,SAAxB,UACI,8BAAMD,IACN,qBAAK5B,UAAWC,IAAQ+B,WAAxB,SACI,cAAC,EAAD,CAAgBzB,SAXV,SAAC0B,GACnBlC,EAAMmC,YAAYD,EAAEE,4B,sDCbxBC,EAA6B,SAAChB,GAAD,MAAY,CACzCiB,OAAQjB,EAAMkB,KAAKD,S,QCgBRE,sBACXC,aAdkB,SAACpB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACoB,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAmBP,UDRR,SAACQ,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAK9C,MAAMsC,OACT,cAACM,EAAD,eAAeE,KAAK9C,QADI,cAAC,IAAD,CAAU+C,GAAG,eAHT,GACXC,IAAMJ,WAQtC,OAFsCH,YAASJ,EAATI,CAAqCI,KCMhEL,CAGbpB","file":"static/js/4.cef8d30b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"AddMessageForm_button__2Dcpu\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={classes.message}>\r\n        {(props.id % 2) ? <div className={classes.left}>{props.message}</div> :  <div className={classes.right}>{props.message}</div>}\r\n            </div>\r\n}\r\n\r\nexport default Message;","import {Field, Form} from \"react-final-form\";\r\nimport React from \"react\";\r\nimport {composeValidators, maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport classes from \"./AddMessageForm.module.css\"\r\n\r\n\r\nconst AddMessageForm = (props) => (\r\n    <Form\r\n        onSubmit={props.onSubmit}\r\n        render={({handleSubmit}) => (\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        name=\"newMessageBody\"\r\n                        validate={composeValidators(required, maxLengthCreator(100))}>\r\n                        {({input, meta}) => (\r\n                            <Textarea input={input} meta={meta} placeholder=\"Enter your message\"/>\r\n                        )}\r\n                    </Field>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.button}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </form>)}\r\n    />\r\n)\r\n\r\nexport default AddMessageForm;","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n    .map(d => <DialogItem name={d.name} key={d.id} id={d.id} ava={d.ava}/>);\r\n    let messagesElements = state.messages\r\n    .map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n    const addNewMessage = (e) => {\r\n        props.sendMessage(e.newMessageBody);\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={classes.addMessage}>\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent =  connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}